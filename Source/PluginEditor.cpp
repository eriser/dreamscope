/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#include "LFOEditorComponent.h"


//==============================================================================
DreamscopeAudioProcessorEditor::DreamscopeAudioProcessorEditor(DreamscopeAudioProcessor& p)
  : AudioProcessorEditor(&p), processor(p)
{
  // Make sure that before the constructor has finished, you've set the
  // editor's size to whatever you need it to be.
  float levels[64];
  for (int i = 0; i < 64; i++)
  {
    levels[i] = 1.0f / (i + 1);
  }

  tabs = new TabbedComponent(TabbedButtonBar::Orientation::TabsAtLeft);
  attackTimeSliders = new MultiSliderComponent(64, 11);
  attackTimeSliders->setListener(this);

  attackLevelSliders = new MultiSliderComponent(64, 11, true);
  attackLevelSliders->setSliderValues(levels);
  attackLevelSliders->setListener(this);

  decayTimeSliders = new MultiSliderComponent(64, 11);
  decayTimeSliders->setListener(this);

  decayLevelSliders = new MultiSliderComponent(64, 11, true);
  decayLevelSliders->setSliderValues(levels);
  decayLevelSliders->setListener(this);

  sustainTimeSliders = new MultiSliderComponent(64, 11);
  sustainTimeSliders->setListener(this);

  releaseTimeSliders = new MultiSliderComponent(64, 11);
  releaseTimeSliders->setListener(this);

  memcpy(processor.attackLevels, levels, 64 * sizeof(float));
  memcpy(processor.decayLevels, levels, 64 * sizeof(float));

  addAndMakeVisible(tabs);
  tabs->addTab("Attack Times", Colours::white, attackTimeSliders, true);
  tabs->addTab("Attack Levels", Colours::white, attackLevelSliders, true);
  tabs->addTab("Decay Times", Colours::white, decayTimeSliders, true);
  tabs->addTab("Decay Levels", Colours::white, decayLevelSliders, true);
  tabs->addTab("Sustain Times", Colours::white, sustainTimeSliders, true);
  tabs->addTab("Release Times", Colours::white, releaseTimeSliders, true);

  setSize(800, 600);
}

DreamscopeAudioProcessorEditor::~DreamscopeAudioProcessorEditor()
{
}

//==============================================================================
void DreamscopeAudioProcessorEditor::paint(Graphics& g)
{
  g.fillAll(Colours::white);
}

void DreamscopeAudioProcessorEditor::resized()
{
  // This is generally where you'll want to lay out the positions of any
  // subcomponents in your editor..
  tabs->setBounds(0, 0, 800, 600);
}

void DreamscopeAudioProcessorEditor::sliderValueChanged(MultiSliderComponent* c, int n, float val)
{
  if (c == attackTimeSliders)
  {
    processor.attackTimes[n] = val;
  }
  else if (c == attackLevelSliders)
  {
    processor.attackLevels[n] = val;
  }
  else if (c == decayTimeSliders)
  {
    processor.decayTimes[n] = val;
  }
  else if (c == decayLevelSliders)
  {
    processor.decayLevels[n] = val;
  }
  else if (c == sustainTimeSliders)
  {
    processor.sustainTimes[n] = val;
  }
  else if (c == releaseTimeSliders)
  {
    processor.releaseTimes[n] = val;
  }
}
